{"version":3,"sources":["components/Board/index.js","pages/Game/game.helpers.js","pages/Game/index.js","App.js","reportWebVitals.js","index.js"],"names":["Board","rows","handleCellClick","className","map","row","yIndex","rowItem","xIndex","onClick","e","getWinner","players","winningLines","i","length","j","playerMark","currentLine","a","b","c","Game","useState","setRows","isPlayerOne","setIsPlayerOne","moves","setMoves","finished","setFinished","useEffect","winner","console","log","toast","error","position","x","y","data","index","updateCell","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a07be30b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./board.css\";\n\nexport default function Board({ rows, handleCellClick }) {\n  return (\n    <div className=\"board\">\n      {rows.map((row, yIndex) => {\n        return (\n          <div className=\"board-row\" key={`row_${yIndex}`}>\n            {row.map((rowItem, xIndex) => {\n              return (\n                <div\n                  className=\"board-cell\"\n                  key={`cell_${xIndex}`}\n                  onClick={(e) => handleCellClick(xIndex, yIndex)}\n                >\n                  <p>{rowItem || \"\"}</p>\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","export function updateCell(rows, x, y, data) {\n  return rows.map((row, index) => {\n    if (index === y && !row[x]) {\n      row[x] = data;\n    }\n    return row;\n  });\n}\n\n//  0 0 0\n//  0 0 0\n//  0 0 0\n\nexport function getWinner(rows) {\n  let winner = null;\n  let players = [\"X\", \"O\"];\n  const winningLines = [\n    // array of arrays of arrays of y,x values\n    [\n      [0, 0],\n      [0, 1],\n      [0, 2],\n    ],\n    [\n      [1, 0],\n      [1, 1],\n      [1, 2],\n    ],\n    [\n      [2, 0],\n      [2, 1],\n      [2, 2],\n    ],\n    [\n      [0, 0],\n      [1, 0],\n      [2, 0],\n    ],\n    [\n      [0, 1],\n      [1, 1],\n      [2, 1],\n    ],\n    [\n      [0, 2],\n      [1, 2],\n      [2, 2],\n    ],\n    [\n      [0, 0],\n      [1, 1],\n      [2, 2],\n    ],\n    [\n      [2, 0],\n      [1, 1],\n      [0, 2],\n    ],\n  ];\n\n  for (let i = 0; i < winningLines.length; i++) {\n    for (let j = 0; j < players.length; j++) {\n      const playerMark = players[j];\n      const currentLine = winningLines[i];\n      const [a, b, c] = currentLine;\n      if (\n        rows[a[0]][a[1]] &&\n        rows[a[0]][a[1]] === playerMark &&\n        rows[a[0]][a[1]] === rows[b[0]][b[1]] &&\n        rows[b[0]][b[1]] === rows[c[0]][c[1]]\n      ) {\n        return playerMark;\n      }\n    }\n  }\n\n  return winner;\n}\n","import React, { useState, useEffect } from \"react\";\nimport Board from \"../../components/Board\";\nimport { updateCell, getWinner } from \"./game.helpers\";\nimport { toast } from \"react-toastify\";\nimport \"./game.css\";\n\nexport default function Game() {\n  const [rows, setRows] = useState([\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n  ]);\n  const [isPlayerOne, setIsPlayerOne] = useState(true);\n  const [moves, setMoves] = useState(0);\n  const [finished, setFinished] = useState(false);\n\n  useEffect(() => {\n    // If moves is greater or equal to 5 run winner algo\n    const winner = getWinner(rows);\n    console.log(\"ROW\");\n    console.log(\"called\");\n\n    if (winner) {\n      toast.error(`${winner} has won!`, { position: \"top-center\" });\n      setFinished(true);\n    }\n  }, [rows]);\n\n  useEffect(() => {\n    if (moves >= 9) {\n      const winner = getWinner(rows);\n      setFinished(true);\n      if (!winner) {\n        toast.error(\"Its a draw!\", { position: \"top-center\" });\n      }\n    }\n  }, [moves]);\n\n  useEffect(() => {\n    if (finished) setMoves(0);\n  }, [finished]);\n\n  const resetBoard = () => {\n    setRows([\n      [null, null, null],\n      [null, null, null],\n      [null, null, null],\n    ]);\n    setIsPlayerOne(true);\n    setFinished(false);\n  };\n\n  const handleCellClick = (x, y) => {\n    // return if the cell has already been marked\n    if (rows[y][x]) {\n      return;\n    }\n    setRows(updateCell(rows, x, y, isPlayerOne ? \"X\" : \"O\"));\n    setIsPlayerOne(!isPlayerOne);\n    setMoves(moves + 1);\n  };\n\n  return (\n    <div className=\"game\">\n      <div>\n        {finished ? (\n          <button\n            className=\"btn-play-again\"\n            onClick={(e) => {\n              resetBoard();\n            }}\n          >\n            Play again\n          </button>\n        ) : (\n          <h1>{`${isPlayerOne ? \"X\" : \"O\"}'s turn`}</h1>\n        )}\n      </div>\n      <Board rows={rows} handleCellClick={handleCellClick} />\n    </div>\n  );\n}\n","import Game from \"./pages/Game\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}