{"version":3,"sources":["logo.svg","components/Board/index.js","pages/Game/index.js","pages/Game/game.helpers.js","App.js","reportWebVitals.js","index.js"],"names":["Board","rows","handleCellClick","isPlayerOne","className","map","row","yIndex","rowItem","xIndex","onClick","e","DEFAULT_ROWS","Game","useState","setRows","setIsPlayerOne","moves","setMoves","x","y","data","index","updateCell","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAAe,I,qBCGA,SAASA,EAAT,GAAwD,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,gBAAgC,EAAfC,YACrD,OACE,qBAAKC,UAAU,QAAf,SACGH,EAAKI,KAAI,SAACC,EAAKC,GACd,OACE,qBAAKH,UAAU,YAAf,SACGE,EAAID,KAAI,SAACG,EAASC,GACjB,OACE,qBACEL,UAAU,aACVM,QAAS,SAACC,GAAD,OAAOT,EAAgBO,EAAQF,IAF1C,SAIE,4BAAIC,GAAW,iB,UCV3BI,EAAe,CACnB,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,OAGA,SAASC,IACtB,MAAwBC,mBAASF,GAAjC,mBAAOX,EAAP,KAAac,EAAb,KACA,EAAsCD,oBAAS,GAA/C,mBAAOX,EAAP,KAAoBa,EAApB,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAYA,OACE,sBAAKd,UAAU,OAAf,UACE,uCAAQD,EAAc,IAAM,IAA5B,aACA,cAACH,EAAD,CAAOC,KAAMA,EAAMC,gBAbC,SAACiB,EAAGC,GAEtBnB,EAAKmB,GAAGD,KAGZJ,ECrBG,SAAoBd,EAAMkB,EAAGC,EAAGC,GACrC,OAAOpB,EAAKI,KAAI,SAACC,EAAKgB,GAIpB,OAHIA,IAAUF,GAAMd,EAAIa,KACtBb,EAAIa,GAAKE,GAEJf,KDgBCiB,CAAWtB,EAAMkB,EAAGC,EAAGjB,EAAc,IAAM,MACnDa,GAAgBb,GAChBe,EAASD,EAAQ,U,MEXNO,MARf,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,cAACS,EAAD,OCKSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4b51da28.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport \"./board.css\";\n\nexport default function Board({ rows, handleCellClick, isPlayerOne }) {\n  return (\n    <div className=\"board\">\n      {rows.map((row, yIndex) => {\n        return (\n          <div className=\"board-row\">\n            {row.map((rowItem, xIndex) => {\n              return (\n                <div\n                  className=\"board-cell\"\n                  onClick={(e) => handleCellClick(xIndex, yIndex)}\n                >\n                  <p>{rowItem || \"\"}</p>\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Board from \"../../components/Board\";\nimport { updateCell } from \"./game.helpers\";\nimport \"./game.css\";\n\nconst DEFAULT_ROWS = [\n  [null, null, null],\n  [null, null, null],\n  [null, null, null],\n];\n\nexport default function Game() {\n  const [rows, setRows] = useState(DEFAULT_ROWS);\n  const [isPlayerOne, setIsPlayerOne] = useState(true);\n  const [moves, setMoves] = useState(0);\n\n  const handleCellClick = (x, y) => {\n    // return if the cell has already been marked\n    if (rows[y][x]) {\n      return;\n    }\n    setRows(updateCell(rows, x, y, isPlayerOne ? \"X\" : \"O\"));\n    setIsPlayerOne(!isPlayerOne);\n    setMoves(moves + 1);\n  };\n\n  return (\n    <div className=\"game\">\n      <h1>{`${isPlayerOne ? \"X\" : \"O\"}'s turn`}</h1>\n      <Board rows={rows} handleCellClick={handleCellClick} />\n    </div>\n  );\n}\n","export function updateCell(rows, x, y, data) {\n  return rows.map((row, index) => {\n    if (index === y && !row[x]) {\n      row[x] = data;\n    }\n    return row;\n  });\n}\n\nexport function getWinner(rows) {\n  let winner = null;\n  let players = [\"X\", \"O\"];\n\n  return winner;\n}\n","import logo from \"./logo.svg\";\nimport Game from \"./pages/Game\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}